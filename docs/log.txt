2014-12-26
==========

- Maybe it would be a good idea to write CMake function modules for command-line tools such as this one ?

- To offload even more work from run time to build time, it would be great to be able to output separate files:
  - the character to glyph index map
  - a simple 1D pixelmap containing every row of every glyph (rows in top-to-bottom or bottom-to-top order)
  - an array, indexable by glyph index, with 3 members: the location where the first row of each glyph begins in the 1D pixelmap; the ascent; and the descent
  
2014-08-03
==========

Good progress on this Sunday afternoon: I fixed, and later improved CppFileEmbedder; I got de-serialization (via Cereal) of RasterizedFont to work.

Regarding Cereal, there's a possible future improvement that I'd like to write down here before I forget about it.

Deserializing works perfectly, but there's unnecessary copying going on that I think could be avoided. The copying occurs on the std::vector's, which the de-serializing code transfers from the embedded object to heap-allocated space.

Given the way Cereal's BinaryArchive works - endianness matches the machine -, and the straightforward way in which I implemented the serializing of my own structures - members are serialized in their declared order -, I think it should be possible to replace the vectors with some kind of "read-only vectors" when deserializing, which instead of allocating memory on the heap would simply store a pointer to the original data.

This is a bit of a challenge to be sure. For example, I'm currently wrapping the data of the embedded rasterized font file into a stringstream, because cereal::BinaryArchive reads its data from a stream; I'm not sure if it is possible to get access to the string underlying a stringstream. And even if that's possible, I'm not yet convinced if creating a string from a const char * involves the string getting copied or not. In other words, I may have to implement my own Cereal archive type, e.g. gpc::cereal::ConstMemoryArchive or something like that.

Even if there's a way to avoid that, implementing an STL-compatible, read-only container to replace std::vector would be challenge enough to begin with. [And, note to myself: to respect DRY, I will have to templatize my RasterizedFont data structure to have it use my hypothetical vector replacement.]

[2014-08-04] Another thought regarding optimized readback of binary archives: there should be some way of enforcing that vector elements (for example) take up a uniform number of bytes in serialized form.

- Use replacements for std::vector e.a. when creating the archive, which enforce that rule ?

- Or use a custom binary archiver that creates a stream that can be read back as one block ?

2014-07-31
==========

It's surprising how much complexity is trying to seep into this simple tool. I must remember not to let myself get carried away.

For example, FreeType has a feature to add multiple font files to a face object, and it might be tempting to use that to get bold and italic versions of a font into a single RasterizedFont structure.

However, that could potentially be very uncomfortable if the font files are not strictly "parallel" in the sense that they carry the same glyphs in the same order: the RasterizedFont structure simply couldn't handle that.

So, keeping font variants together is a future task for a higher-level structure, perhaps to be called FontIndex or similar.